What happens when you initialize a repository? Why do you need to do it?

    Initialzing a repository is the first step in starting Git's history 
    tracking. Doing so, all the files in the directory of the repository
    are grouped into a repository which can then be tracked.

How is the staging area different from the working directory and the repository? What value do you think it offers?

    The staging area contains only the file that are to be added in a 
    commit whereas the working directory contains both the files in the
    staging area and also those not in staging area i.e. it contains all
    of the files in the repository directory. Staging area allows complete 
    control over which files to be added in a commit allowing selection of 
    either on, all or any number of files.

How can you use the staging area to make sure you have one commit per logical change?

    Having the staging area means not every single change is being committed
    since first we have to add the changed file to the staging area and then
    commit the changes, ensuring that the commit is only being done when it 
    actually is needed and a logical change has been made.

What are some situations when branches would be helpful in keeping your history organized? How would branches help?

    Branches, as the name implies, should be used when different versions of
    the project are to be made and all of them are needed. For example, to add
    a new experimental feature, while it's still in its experimental stages, a
    separate branch should be made. Branches ensure that changes can be made in 
    them freely without affecting the main branch or the master branch which 
    would have the original working project.

How do the diagrams help you visualize the branch structure?

    Drawing diagrams helps bring the entire branch structure in a systematic 
    diagram that is very much easier to understand. The branch structure by its 
    name itself implies a structure of various branches projecting out, which 
    can be made sense of easily by drawing its diagram.

What is the result of merging two branches together? Why do we represent it in the diagram the way we do?

    Merging two branches literally merges or combines the changes of the two or 
    more given branches. We don't have to worry about how it's done since Git does
    it for us automatically. In the diagram, a merge would be represented as a new
    commit acting as a parent to all of the branches that were merged into its 
    branch, merge actually does form a commit called a merge commit which is now the
    head of the merged into branch.