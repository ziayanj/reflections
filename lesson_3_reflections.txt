  When would you want to use a remote repository rather than keeping all your work local?

    When the repository is to be shared with other people as using a remote repository 
    on GitHub allows everyone to access, share and collaborate on everything easily.

Why might you want to always pull changes manually rather than having Git automatically stay up-to-date with your remote repository?
    The remote repository might have been updated by someone else and in this case you may
    not always want to pull those changes to your local repository. 

Describe the differences between forks, clones, and branches. When would you use one instead of another?

    Fork is basically creating a copy of a GitHub repository on your own GitHub account, it 
    only exists on the GitHub's servers and cloning is what can be used to make a copy of it,
    or, more generally, any repository, on your computer as a local repository. Cloning also
    sets a remote to the repository the cloning was done from. Branches are the different 
    paths or well, branches, within a repository generally made to keep different versions 
    of something separate while also being present simultaneously.
    Forks are used when the original author of the repository does not want his repository
    to be changed but you want to make some changes in it, you can fork it to your GitHub
    account. Cloning is used when the repository requires changing from your computer locally.
    Branches are generally used when an experimental feature or a developing idea is to be
    implemented as it allows doing so keeping the original version intact and operational.

What is the benefit of having a copy of the last known state of the remote stored locally?

    It allows solving conflicts more easily as you can locally run commands like git log 
    and git diff to see what changes were introduced both in the local and the remote 
    repository and then resolve those conflicts without needing an internet connection to
    keep you connected to the remote.

How would you collaborate without using Git or GitHub? What would be easier, and what would be harder?

    You might have to use some sort of an online group to communicate whatever ideas or 
    changes someone wants to do but it would require the one proposing the change to provide
    the exact changes that they did so everyone else can also try them out before making 
    them offical, they'll have to obviously share a lot of code and keep different files of 
    the project for different features/ideas and to experiment. This would very obviously be 
    very hard as compared to Git/GitHub which are built to serve this very purpose and have all 
    of these functionalities built-in requiring little to no effort.

When would you want to make changes in a separate branch rather than directly in master? What benefits does each approach have?

    When experimenting with a new feature and especially when you'd like to get others' feedback
    on whatever your changes are before you actually incorporate them into your main project. 
    Working directly in master might be better if you're pretty sure about what you're doing, 
    since it's easier to push and pull and update your repository with those changes as compared to
    when creating different branches but then again, you don't get the main benefit of using GitHub
    this way; collaborating with others and getting their feedback before changing anything.